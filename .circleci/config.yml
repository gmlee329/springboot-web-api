# 참고 : https://circleci.com/docs/2.0/config-intro/
version: 2.1
parameters:
  package-name:
    description: spring boot application package name
    type: string
    default: "demo3"
  package-version:
    description: spring boot application package version
    type: string
    default: "1.0"
  from-repository:
    description: A local file or source s3 object
    type: string
    default: "./target"
  to-repository:
    description: A local target or s3 destination
    type: string
    default: "s3://spring-boot-repository/target/"

# s3 사용을 위한 orbs
orbs:
  aws-s3: circleci/aws-s3@3.0.0

# CircleCI에서 수행할 job들을 명시
jobs:

  # CircleCI로 빌드하기 위한 과정을 명시
  # job의 이름을 build로 명시 (job에 알맞는 이름으로 변경 가능)
  build:

    # application이 빌드 되기 위한 docker image를 명시
    # https://circleci.com/developer/images/image/cimg/openjdk에서 java 버전에 맞는 이미지를 찾을 수 있음
    docker:
      - image: cimg/openjdk:8.0

    working_directory: ~/springboot-web-api

    # 컨테이너에서 사용할 시스템 환경 변수
    environment:
      PACKAGE_NAME: << pipeline.parameters.package-name >>
      PACKAGE_VERSION: << pipeline.parameters.package-version >>

    # 실행(run)할 명령들의 단계를 명시
    steps:

      # 연동된 git에서 repository를 pull 해오는 단계
      - checkout

      # dependencies를 캐싱 해둠
      - restore_cache:
          keys:
            - spring-web-api-{{ checksum "pom.xml" }}

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: spring-web-api-{{ checksum "pom.xml" }}

      # 실행할 명령의 단위
      # warnings, errors, output 등이 출력될 때 붙는 이름이므로 각 명령어 단계를 잘 구분하도록 지음
      # 애플리케이션 패키징 (target 폴더에 jar파일로 생성)
      - run:
          name: build spring-web-api
          command: |
            echo "---------- packaging start ----------"
            mvn -B -DskipTests clean package
            echo "---------- packaging end ----------"

      # 패키징된 jar 파일 확인
      - run:
          name: check jar file
          command: |
            echo "---------- checking a jar file start ----------"
            ls -al ./target | grep ${PACKAGE_NAME}-${PACKAGE_VERSION}.jar
            echo "---------- checking a jar file end ----------"

      # 패키징 한 후 jar 파일을 다음 job에서 s3에 업로드 하기 위해 target 폴더 공유
      - persist_to_workspace:
          root: .
          paths:
            - ./target

  # AWS S3에 jar 파일 upload
  upload:
    docker:
      - image: cimg/python:3.8
    working_directory: ~/springboot-web-api
    environment:
      PACKAGE_NAME: << pipeline.parameters.package-name >>
      PACKAGE_VERSION: << pipeline.parameters.package-version >>
      FROM_REPOSITORY: << pipeline.parameters.from-repository >>
      TO_REPOSITORY: << pipeline.parameters.to-repository >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: check environments
          command: |
            echo "PACKAGE_NAME : ${PACKAGE_NAME}"
            echo "PACKAGE_VERSION : ${PACKAGE_VERSION}"
            echo "FROM_REPOSITORY : ${FROM_REPOSITORY}"
            echo "TO_REPOSITORY : ${TO_REPOSITORY}"
            pwd
            ls -al .
            ls -al ./target
      - aws-s3/sync:
          arguments: |
            --exclude "*" \
            --include "${PACKAGE_NAME}-${PACKAGE_VERSION}.jar"
          from: ${FROM_REPOSITORY}
          to: ${TO_REPOSITORY}

# workflow를 정의하여 위에서 명시한 job의 순서, 의존성 등을 정해 수행
workflows:
  version: 2

  # workflow의 이름
  build-and-upload:

    # 실행해야하는 위에서 미리 정의해 둔 job을 명시
    jobs:
      - build
      - upload:

          # 'build'가 수행되고 난 후에 수행되어야 함
          requires:
            - build

          # commit이 main branch에서 수행될 때만 수행
          filters:
            branches:
              only: main
